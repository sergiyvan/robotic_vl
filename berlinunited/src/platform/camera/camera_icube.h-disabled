/** @file
 **
 ** Base class for Net GmbH's iCube camera.
 */

#ifndef CAMERA_ICUBE_H_
#define CAMERA_ICUBE_H_

#include "camera.h"
#include "representations/camera/camera_imageBayer.h"
#include "platform/system/timer.h"
#include "platform/system/thread.h"

#include <inttypes.h>
#include <libusb-1.0/libusb.h>
#include <string>


/*------------------------------------------------------------------------------------------------*/

const int BufferCount = 3;
const int ImageTransferCount = 20;


/*------------------------------------------------------------------------------------------------*/

// supported registers, definitions taken from MT9P001 documentation and comments
// from Ephel source code
typedef enum {
	P_MT9X001_CHIP_VERSION             = 0x00,
	P_MT9X001_ROW_START                = 0x01, // first row to read out
	P_MT9X001_COLUMN_START             = 0x02, // first column to read out, must be even
	P_MT9X001_ROW_SIZE                 = 0x03, // number of rows-1 (min value=2)
	P_MT9X001_COLUMN_SIZE              = 0x04, // number of columns-1 (odd, >=3)
	P_MT9X001_HORIZONTAL_BLANKING      = 0x05,
	P_MT9X001_VERTICAL_BLANKING        = 0x06,
	P_MT9X001_OUTPUT_CONTROL           = 0x07, /* Output format bits (dflt=2/2/2/1f82) :
	                                               bit 0 - 0 - normal, 1 - do not update integration, gains, blanking, flip, decimation''
	                                               bit 1 - 0 - stop sensor, 1 - normal (0->1 restarts from start of the frame)
	                                               bits 2,3 should be 0 (in mt9p bit 2 selects fifo output data)
	                                               bit 6 - 0 - normal, 1 - test (mt9p - reserved)
	                                              mt9p001:
	                                                9:7  pixclk slew rate (0..7, higher - faster) dflt - 7
	                                               12:10 output (but pixclk) slew rate (0..7, higher - faster) dflt -7
	                                           */
	P_MT9X001_SHUTTER_WIDTH_UPPER      = 0x08, // shutter width upper - number of rows to integrate
	P_MT9X001_SHUTTER_WIDTH_LOWER      = 0x09, // shutter width - number of rows to integrate
	P_MT9X001_PIXEL_CLOCK_CONTROL      = 0x0A, /* Pixel clock control (dflt=0)
	                                               bits 6:0 - divide pixel clock {0,1,2,4,8,16,32,64}
	                                               bits 10:8 - shift pixel clock [-2,2]
	                                               bit 15 - invert pixel clock
	                                           */
	P_MT9X001_RESTART                  = 0x0B, /* Sensor restart (autozeroed) writing 1 restarts frame /0
	                                               bit 0 - 1 - restart (autoclearing bit)
	                                               bit 1 - pause restart
	                                               bit 2 - trigger (like trigger input)
	                                           */
	P_MT9X001_SHUTTER_DELAY            = 0x0C, // shutter delay - number of pixels before row reset
	P_MT9X001_RESET                    = 0x0D, // 0 - normal, 1 - reset /0
	P_MT9X001_PLL_CONTROL              = 0x10, /* PLL CTL 1  (dflt=0x50)
	                                               bit 0 - power PLL
	                                               bit 1 - use PLL
	                                               other bits - set to dflt (0x50)
	                                           */
	P_MT9X001_PLL_CONFIG_1             = 0x11, /* PLL CTL 2  (dflt=0x6404)
	                                               5:0 - PLL n divider [0,63] - dflt 4
 	                                              15:8 PLL m factor [16,255] - dflt 0x64
	                                           */
	P_MT9X001_PLL_CONFIG_2             = 0x12, /* PLL CTL 3  (dflt=0x0)
	                                               4:0 PLL p1 divider [0,127]
	                                            */
	P_MT9X001_READ_MODE_1              = 0x1E,
	P_MT9X001_READ_MODE_2              = 0x20, /* Read options 2, (dflt=0x1104/1104/0/40):
	                                               +++-bit  0 - allow "bad frames". 0 (default) - output only good frames, 1 - allow bad also
	                                               ----bits 1 - reserved, should be 0
	                                               ++--bit  2 - reserved, should be 1/1/0
	                                               ++--bit  3 - column skip (1 - read 2, skip 2; 0 - read all) If this bit is 1,  both column skip 4 and column skip 8 (0x1e) are ignored
	                                               ++--bit  4 - row skip (1 - read 2, skip 2; 0 - read all)  Similar to the above
	                                               ---+bit  5 -column sum in binning (0 - average)
	                                               ++--bit  6 - reserved, should be 0
	                                               ---+bit  6 - row BLC (dflt=`1) (use per-row black level, 0 - global)
	                                               +??-bit  7 - flip odd/even rows (0 - normal)
	                                               ++--bit  8 - reserved, should be 1
	                                               +++-bit  9 - enable "line valid" during vertical blanking, 0 - normal (no lane valid during blanking)
	                                               +++-bit 10 - XOR "line valid" with vertical blanking, 0 just mask "l.v." with bit 9
	                                               +---bit 11 - reserved, should be 0
	                                               ---+bit 11 - show dark rows
	                                               +---bit 12 - reserved, should be 1
	                                               ---+bit 12 - show dark columns
	                                               +---bits 13 - reserved, should be 0
	                                               --++bit 14 - flip horizontal (0 - normal) *UNDOCUMENTED* documented in MT9P001 !!
	                                               --++bit 15 - flip vertical (0 - normal)
 	                                           */
//	P_MT9X001_READ_MODE_3              = 0x21, // (MT9T only)
	P_MT9X001_ROW_ADDRESS_MODE         = 0x22,
	P_MT9X001_COLUMN_ADDRESS_MODE      = 0x23,
	P_MT9X001_GREEN1_GAIN              = 0x2B,
	P_MT9X001_BLUE_GAIN                = 0x2C,
	P_MT9X001_RED_GAIN                 = 0x2D,
	P_MT9X001_GREEN2_GAIN              = 0x2E,
	P_MT9X001_GLOBAL_GAIN              = 0x35,
	P_MT9X001_UNKNOWN_0x41             = 0x41,
	P_MT9X001_UNKNOWN_0x42             = 0x42,
	P_MT9X001_ROW_BLACK_TARGET         = 0x49,
	P_MT9X001_ROW_BLACK_DEFAULT_OFFSET = 0x4B,
	P_MT9X001_BLC_SAMPLE_SIZE          = 0x5B,
	P_MT9X001_BLC_TUNE_1               = 0x5C,
	P_MT9X001_BLC_DELTA_THRESHOLDS     = 0x5D,
	P_MT9X001_BLC_TUNE_2               = 0x5E,
	P_MT9X001_BLC_TARGET_THRESHOLDS    = 0x5F,
	P_MT9X001_GREEN1_OFFSET            = 0x60,
	P_MT9X001_GREEN2_OFFSET            = 0x61,
	P_MT9X001_BLACK_LEVEL_CALIBRATION  = 0x62,
	P_MT9X001_RED_OFFSET               = 0x63,
	P_MT9X001_BLUE_OFFSET              = 0x64,
	P_MT9X001_7F                       = 0x7f, // should be written 0 to prevent blue "blooming" columns
	P_MT9X001_TEST                     = 0xA0, /* test patterns
	                                               bits 6:3:
	                                                 0: color field
	                                                 1: horizontal gradient
	                                                 2: vertical gradient
	                                                 3: diagonal
	                                                 4: classic
	                                                 5: marching 1's
	                                                 6: monochrome horizontal bars
	                                                 7: monochrome vertical bars
	                                                 8: vertical color bars
	                                                 Legal values: [0, 15].
	                                               bit    2     Reserved
	                                               bit    1     Reserved
	                                               bit    0     Enables the test pattern. When set, data from the ADC will be replaced with a digitally
	                                                            generated test pattern specified by Test_Pattern_Mode.
	                                            */


	P_MT9X001_CHIP_VERSION_ALT         = 0xFF
} ICubeRegister;


/*------------------------------------------------------------------------------------------------*/

class ICubeImageBuffer {
public:
	bool  active;      // whether this buffer is active
	bool  filled;      // whether this buffer is filled with an image

	char* data;        // image data
	int   maxDataSize; // maximum allocated memory for image data
	int   dataLength;  // current write position in stream

	robottime_t startCapture;

	ICubeImageBuffer()
		: active(true)
		, filled(false)
		, data(0)
		, maxDataSize(0)
		, dataLength(0)
		, startCapture(0)
	{}
};


/*------------------------------------------------------------------------------------------------*/

class CameraICube : public Camera, public Thread {
public:
	CameraICube();
	virtual ~CameraICube();

	const char* getName() {
		return "CameraICube";
	}

	virtual std::string getCameraName() {
		return "iCube";
	}

	virtual bool openCamera(const char* deviceName, uint16_t requestedImageWidth=640, uint16_t requestedImageHeight=480);
	virtual void closeCamera();
	virtual bool isOpen();

#ifdef INTERPOLATE_BAYER
	/// return the width of the images that this camera will capture
	virtual uint16_t getImageWidth()  { return imageWidth/2;  }

	/// return the height of the images that this camera will capture
	virtual uint16_t getImageHeight() { return imageHeight/2; }
#endif

	virtual bool capture();

	// set a camera setting
	virtual void setSetting(CAMERA_SETTING setting, int32_t value);

	// get a camera setting
	virtual int32_t getSetting(CAMERA_SETTING setting);

	void test();

protected:
	virtual void threadMain();

private:
	libusb_device_handle *handle;

	CriticalSection cs;

	// buffers of frame data
	ICubeImageBuffer imageBuffer[BufferCount];
	uint8_t          captureBufferIndex;
	uint8_t          exportedBufferIndex;

	// buffer to be used for incoming/outgoing data
	uint8_t *buffer;
	const int bufferSize;

	ContinousEvent frameCapturedEvent;

	struct libusb_transfer *img_transfer[ImageTransferCount];

	void handle_usb_callback(struct libusb_transfer *transfer, int transferIndex);
	static void usb_callback(struct libusb_transfer *transfer);

	bool init_camera();
	bool alloc_transfers();
	bool init_capture();

	void dealloc_transfers();

	void register_setup(ICubeRegister reg);
	bool write_register(ICubeRegister reg, uint16_t value, unsigned char* data=NULL, uint16_t dataLen=0);
	bool read_register(ICubeRegister reg, uint16_t* value);

	uint16_t gainValue(uint8_t digitalGain, bool analogMultiplier, uint8_t analogGain);
};


class ICubeUserData {
public:
	CameraICube* cam;
	int           index;
};

#endif /* CAMERA_ICUBE_H_ */
